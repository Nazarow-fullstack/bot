import pandas as pd
import re
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, MessageHandler, CommandHandler, CallbackContext, filters, ConversationHandler

TOKEN = "8063979437:AAEXSFhsyc_AGMULR86xZQnzzsaGB-v-zys"
BACKEND_URL = "https://backend-1-cu4o.onrender.com/get-data"      # Fixed: Fetch JSON instead of xlsx

LANGUAGE, MENU, PHONE, WEIGHT = range(4)

languages = {
    "–†—É—Å—Å–∫–∏–π": "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
    "English": "üì± Please send the correct phone number.",
    "–¢–æ“∑–∏–∫”£": "üì± –õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ –¥—É—Ä—É—Å—Ç—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–¥."
}

menu_options = {
    "–†—É—Å—Å–∫–∏–π": [["üì¶ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑", "üí∞ –¶–µ–Ω–∞"], ["üìç –õ–æ–∫–∞—Ü–∏—è –≥—Ä—É–∑–∞", "‚öñÔ∏è –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"]],
    "English": [["üì¶ Check my order", "üí∞ Price"], ["üìç Location of cargo", "‚öñÔ∏è Calculate cost"]],
    "–¢–æ“∑–∏–∫”£": [["üì¶ –°–∞–Ω“∑–∏–¥–∞–Ω–∏ —Ñ–∞—Ä–º–æ–∏—à", "üí∞ –ù–∞—Ä—Ö–∏ 1–∫–≥"], ["üìç “∂–æ–π–≥–∏—Ä—à–∞–≤–∏–∏ –±–æ—Ä", "‚öñÔ∏è “≤–∏—Å–æ–±–∏ –∞—Ä–∑–∏—à"]]
}

menu_responses = {
    "–†—É—Å—Å–∫–∏–π": {
        "check_order": "üì¶ –í—ã –≤—ã–±—Ä–∞–ª–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.",
        "price": "üí∞ –¶–µ–Ω–∞ 1 –∫–≥: 8$",
        "location": "üìç –ì—Ä—É–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–µ.",
        "calculate_cost": "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ (–∫–≥):"
    },
    "English": {
        "check_order": "üì¶ You selected 'Check my order'. Please send your phone number to search.",
        "price": "üí∞ Price for 1 kg: 8$",
        "location": "üìç The cargo is located in Tajikistan.",
        "calculate_cost": "‚öñÔ∏è Please enter the weight of your order (kg):"
    },
    "–¢–æ“∑–∏–∫”£": {
        "check_order": "üì¶ –®—É–º–æ '–°–∞–Ω“∑–∏–¥–∞–Ω–∏ —Ñ–∞—Ä–º–æ–∏—à'-—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫–∞—Ä–¥–µ–¥. –õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ —Ö—É–¥—Ä–æ –±–∞—Ä–æ–∏ “∑—É—Å—Ç—É“∑”Ø —Ñ–∏—Ä–∏—Å—Ç–µ–¥.",
        "price": "üí∞ –ù–∞—Ä—Ö–∏ 1 –∫–≥: 8$",
        "location": "üìç –ë–æ—Ä –¥–∞—Ä –¢–æ—á–∏–∫–∏—Å—Ç–æ–Ω “õ–∞—Ä–æ—Ä –¥–æ—Ä–∞–¥.",
        "calculate_cost": "‚öñÔ∏è –õ—É—Ç—Ñ–∞–Ω –≤–∞–∑–Ω–∏ —Ñ–∞—Ä–º–æ–∏—à (–∫–≥)-—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:"
    }
}

user_languages = {}

def fetch_orders():
    """Fetch order data from the backend."""
    try:
        response = requests.get(BACKEND_URL)
        response.raise_for_status()
        return response.json()  # Returns a list of order dictionaries
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def extract_number(text):
    return re.findall(r'\d+', str(text))

def find_user_orders(phone_number):
    orders_data = fetch_orders()
    if not orders_data:
        return ["‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."]
    
    orders = []
    for order in orders_data:
        order_id = order.get("Order ID")
        details = str(order.get("Details", ""))
        date = order.get("Date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        if phone_number in extract_number(details):
            orders.append(f"üì¶ **–ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω!**\nüÜî Order ID: {order_id}\nüìú –î–µ—Ç–∞–ª–∏: {details}\nüìÖ –î–∞—Ç–∞: {date}")

    return orders if orders else ["‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω."]

async def start(update: Update, context: CallbackContext):
    keyboard = [["–†—É—Å—Å–∫–∏–π", "English", "–¢–æ“∑–∏–∫”£"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language / –ó–∞–±–æ–Ω–∏ —Ö—É–¥—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", reply_markup=reply_markup)
    return LANGUAGE

async def set_language(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    chosen_language = update.message.text
    if chosen_language in languages:
        user_languages[user_id] = chosen_language
        keyboard = [[option] for option in menu_options[chosen_language]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return MENU
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return LANGUAGE

async def menu_handler(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    chosen_language = user_languages.get(user_id, "–†—É—Å—Å–∫–∏–π")
    text = update.message.text

    if text in menu_options[chosen_language]:
        if text == menu_options[chosen_language][0]:  # "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑"
            await update.message.reply_text(menu_responses[chosen_language]["check_order"])
            return PHONE
        elif text == menu_options[chosen_language][1]:  # "–¶–µ–Ω–∞"
            await update.message.reply_text(menu_responses[chosen_language]["price"])
        elif text == menu_options[chosen_language][2]:  # "–õ–æ–∫–∞—Ü–∏—è –≥—Ä—É–∑–∞"
            await update.message.reply_photo(
                photo="https://www.wanderlustmagazine.com/wp-content/uploads/2023/10/WAND_Tajikistan-512x512.jpg",
                caption=menu_responses[chosen_language]["location"]
            )
        elif text == menu_options[chosen_language][3]:  # "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"
            await update.message.reply_text(menu_responses[chosen_language]["calculate_cost"])
            return WEIGHT
    return MENU

async def handle_phone(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_number = update.message.text.strip()
    chosen_language = user_languages.get(user_id, "–†—É—Å—Å–∫–∏–π")

    if user_number.isdigit():
        user_orders = find_user_orders(user_number)
        for order in user_orders:
            await update.message.reply_text(order, parse_mode="Markdown")
    else:
        await update.message.reply_text(languages[chosen_language])
    return MENU

async def calculate_cost(update: Update, context: CallbackContext):
    try:
        weight = float(update.message.text)
        cost = weight * 8
        await update.message.reply_text(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {cost}$")
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    return MENU

def main():
    print("‚úÖ Bot is starting...")
    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_language)],
            MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, menu_handler)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, calculate_cost)],
        },
        fallbacks=[CommandHandler("start", start)],
    )
    
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()
